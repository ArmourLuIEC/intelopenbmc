From b75728a55016289d7a0eabaaee453051e4d29742 Mon Sep 17 00:00:00 2001
From: Krzysztof Grobelny <krzysztof.grobelny@intel.com>
Date: Wed, 1 Dec 2021 12:27:22 +0100
Subject: [PATCH] Invalid status code from InsertMedia REST methods GET, PUT,
 DELETE, PATCH in proxy mode

Add handlers for GET, PUT, DELETE, PATCH method and function that
checks which mode is used and set suitable status code:
Not allowed for Legacy and Not found for Proxy.

Change-Id: Ib4c0a3e9a2a8853caa74c59239d9fcfed99c5e8b
Signed-off-by: Alicja Rybak <alicja.rybak@intel.com>
Signed-off-by: P Dheeraj Srujan Kumar <p.dheeraj.srujan.kumar@intel.com>
---
 redfish-core/lib/virtual_media.hpp | 137 +++++++++++++++++++++++++++++
 1 file changed, 137 insertions(+)

diff --git a/redfish-core/lib/virtual_media.hpp b/redfish-core/lib/virtual_media.hpp
index dc829b3..5df7b5e 100644
--- a/redfish-core/lib/virtual_media.hpp
+++ b/redfish-core/lib/virtual_media.hpp
@@ -30,6 +30,117 @@
 
 namespace redfish
 {
+
+/**
+ * @brief Function checks if insert media request is Legacy or Proxy type
+ *        and sets suitable response code for unsupported REST method.
+ *
+ */
+void checkProxyMode(const std::shared_ptr<bmcweb::AsyncResp>& aResp,
+                    const crow::Request& req, const std::string& name,
+                    const std::string& resName)
+{
+    if (name != "bmc")
+    {
+        messages::resourceNotFound(aResp->res, "VirtualMedia.Insert", resName);
+
+        return;
+    }
+
+    crow::connections::systemBus->async_method_call(
+        [aResp, req, resName](const boost::system::error_code ec,
+                              const GetObjectType& getObjectType) {
+            if (ec)
+            {
+                BMCWEB_LOG_ERROR << "ObjectMapper::GetObject call failed: "
+                                 << ec;
+                aResp->res.result(boost::beast::http::status::not_found);
+
+                return;
+            }
+
+            if (getObjectType.size() == 0)
+            {
+                BMCWEB_LOG_ERROR << "ObjectMapper : No Service found";
+                aResp->res.result(boost::beast::http::status::not_found);
+                return;
+            }
+
+            std::string service = getObjectType.begin()->first;
+            BMCWEB_LOG_DEBUG << "GetObjectType: " << service;
+
+            crow::connections::systemBus->async_method_call(
+                [service, resName, req,
+                 aResp](const boost::system::error_code ec,
+                        dbus::utility::ManagedObjectType& subtree) {
+                    if (ec)
+                    {
+                        BMCWEB_LOG_DEBUG << "DBUS response error";
+
+                        return;
+                    }
+
+                    for (auto& item : subtree)
+                    {
+                        std::string thispath = item.first.filename();
+                        if (thispath.empty())
+                        {
+                            continue;
+                        }
+
+                        if (thispath != resName)
+                        {
+                            continue;
+                        }
+
+                        auto mode = item.first.parent_path();
+                        auto type = mode.parent_path();
+                        if (mode.filename().empty() || type.filename().empty())
+                        {
+                            continue;
+                        }
+
+                        if (type.filename() != "VirtualMedia")
+                        {
+                            continue;
+                        }
+
+                        // Check if dbus path is Legacy type
+                        if (mode.filename() == "Legacy")
+                        {
+                            BMCWEB_LOG_DEBUG << "InsertMedia only allowed "
+                                                "with POST method "
+                                                "in legacy mode";
+                            aResp->res.result(
+                                boost::beast::http::status::method_not_allowed);
+
+                            return;
+                        }
+                        // Check if dbus path is Proxy type
+                        if (mode.filename() == "Proxy")
+                        {
+                            // Not possible in proxy mode
+                            BMCWEB_LOG_DEBUG << "InsertMedia not "
+                                                "allowed in proxy mode";
+                            aResp->res.result(
+                                boost::beast::http::status::not_found);
+
+                            return;
+                        }
+                    }
+
+                    BMCWEB_LOG_DEBUG << "Parent item not found";
+                    aResp->res.result(boost::beast::http::status::not_found);
+                },
+                service, "/xyz/openbmc_project/VirtualMedia",
+                "org.freedesktop.DBus.ObjectManager", "GetManagedObjects");
+        },
+        "xyz.openbmc_project.ObjectMapper",
+        "/xyz/openbmc_project/object_mapper",
+        "xyz.openbmc_project.ObjectMapper", "GetObject",
+        "/xyz/openbmc_project/VirtualMedia", std::array<const char*, 0>());
+}
+
 /**
  * @brief Function extracts transfer protocol name from URI.
  */
@@ -840,6 +951,32 @@ struct InsertMediaActionParams
 
 inline void requestNBDVirtualMediaRoutes(App& app)
 {
+    BMCWEB_ROUTE(app, "/redfish/v1/Managers/<str>/VirtualMedia/<str>/Actions/"
+                      "VirtualMedia.InsertMedia")
+        .privileges({{"Login"}})
+        .methods(boost::beast::http::verb::get)(
+            [](const crow::Request& req,
+               const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+               const std::string& name, const std::string& resName) {
+                checkProxyMode(asyncResp, req, name, resName);
+            });
+
+    for (auto method :
+         {boost::beast::http::verb::patch, boost::beast::http::verb::put,
+          boost::beast::http::verb::delete_})
+    {
+        BMCWEB_ROUTE(app,
+                     "/redfish/v1/Managers/<str>/VirtualMedia/<str>/Actions/"
+                     "VirtualMedia.InsertMedia")
+            .privileges({{"ConfigureManager"}})
+            .methods(method)(
+                [](const crow::Request& req,
+                   const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+                   const std::string& name, const std::string& resName) {
+                    checkProxyMode(asyncResp, req, name, resName);
+                });
+    }
+
     BMCWEB_ROUTE(
         app,
         "/redfish/v1/Managers/<str>/VirtualMedia/<str>/Actions/VirtualMedia.InsertMedia")
-- 
2.25.1

