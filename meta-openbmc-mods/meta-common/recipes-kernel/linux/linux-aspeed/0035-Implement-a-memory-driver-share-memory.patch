From 1d459c15998c9a79ba7a758cef6129ed29f3b958 Mon Sep 17 00:00:00 2001
From: cyang29 <cheng.c.yang@intel.com>
Date: Fri, 9 Nov 2018 10:24:37 +0800
Subject: [PATCH] Implement a memory driver share memory

Implement a memory driver for BMC to access VGA share memory.
The driver is used by MDRV2. In MDRV2 BIOS will send whole
SMBIOS table to VGA memory and BMC can get the table from VGA
memory through this driver.

Signed-off-by: cyang29 <cheng.c.yang@intel.com>
---
 .../devicetree/bindings/misc/vga-shared-memory.txt |  20 +++
 drivers/misc/Kconfig                               |  10 ++
 drivers/misc/Makefile                              |   1 +
 drivers/misc/aspeed-vga-sharedmem.c                | 164 +++++++++++++++++++++
 4 files changed, 195 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/misc/vga-shared-memory.txt
 create mode 100644 drivers/misc/aspeed-vga-sharedmem.c

diff --git a/Documentation/devicetree/bindings/misc/vga-shared-memory.txt b/Documentation/devicetree/bindings/misc/vga-shared-memory.txt
new file mode 100644
index 000000000000..03f57c53e844
--- /dev/null
+++ b/Documentation/devicetree/bindings/misc/vga-shared-memory.txt
@@ -0,0 +1,20 @@
+* Aspeed VGA shared memory driver
+
+Aspeed VGA shared memory driver allow user to read data from AST2500
+VGA memory. This driver is required by ManagedDataRegionlV2
+specification. In the spec, BIOS will transfer whole SMBIOS table to
+VGA memroy and BMC get the table from VGA memory. 0penBMC project do
+not allow to use /dev/mem for security concerns. To get the data in
+VGA shared memory in user space, implement this driver only allowed
+user to mmap limited memory area.
+
+Required properties:
+- compatible: "aspeed,ast2500-vga-sharedmem"
+	- aspeed,ast2500-vga-sharedmem: Aspeed AST2500 family
+- reg: Should contain VGA shared memory start address and length
+
+Example:
+vga-shared-memory {
+	compatible = "aspeed,ast2500-vga-sharedmem";
+	reg = <0x9ff00000 0x100000>;
+};
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 8e2fc51dcc44..1279a9674537 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -543,6 +543,16 @@ config ASPEED_UART_ROUTING
 	  If you want to configure UART routing on Aspeed BMC platforms, enable
 	  this option.
 
+config ASPEED_VGA_SHAREDMEM
+	tristate "Aspeed VGA Shared memory"
+	depends on (ARCH_ASPEED || COMPILE_TEST)
+	help
+	  To access VGA shared memory on Aspeed BMC, enable this option.
+	  This driver used by ManagedDataRegionlV2 specification. In the
+	  specification, BIOS will transfer whole SMBIOS table to VGA
+	  memory, and BMC can get the table from VGA memory through this
+	  driver.
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 0f00eb63556c..f4951a6e435b 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -62,3 +62,4 @@ obj-$(CONFIG_ASPEED_LPC_SIO)   += aspeed-lpc-sio.o
 obj-$(CONFIG_PCI_ENDPOINT_TEST)	+= pci_endpoint_test.o
 obj-$(CONFIG_OCXL)		+= ocxl/
 obj-$(CONFIG_MISC_RTSX)		+= cardreader/
+obj-$(CONFIG_ASPEED_VGA_SHAREDMEM) += aspeed-vga-sharedmem.o
diff --git a/drivers/misc/aspeed-vga-sharedmem.c b/drivers/misc/aspeed-vga-sharedmem.c
new file mode 100644
index 000000000000..76f60cd67d3a
--- /dev/null
+++ b/drivers/misc/aspeed-vga-sharedmem.c
@@ -0,0 +1,164 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2018 Intel Corporation
+ * VGA Shared Memory driver for Aspeed AST2500
+ */
+
+#include <linux/kernel.h>
+#include <linux/miscdevice.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+#include <linux/of_platform.h>
+
+#define SHAREDMEM_NAME "vgasharedmem"
+
+struct aspeed_vga_sharedmem {
+	struct miscdevice	miscdev;
+	unsigned int	addr;
+	unsigned int	size;
+	bool	mmap_enable;
+};
+
+static struct aspeed_vga_sharedmem *file_sharemem(struct file *file)
+{
+	return container_of(file->private_data,
+			struct aspeed_vga_sharedmem, miscdev);
+}
+
+static int vga_open(struct inode *inode, struct file *file)
+{
+	if (!capable(CAP_SYS_ADMIN))
+		return -EPERM;
+
+	struct aspeed_vga_sharedmem *vga_sharedmem = file_sharemem(file);
+
+	if (!vga_sharedmem->mmap_enable)
+		return -EPERM;
+
+	return 0;
+}
+
+static int vga_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	struct aspeed_vga_sharedmem *vga_sharedmem = file_sharemem(file);
+
+	if (!capable(CAP_SYS_ADMIN))
+		return -EPERM;
+
+	vma->vm_flags = (vma->vm_flags & (~VM_WRITE));
+	remap_pfn_range(vma, vma->vm_start, vga_sharedmem->addr >> PAGE_SHIFT,
+			vga_sharedmem->size, vma->vm_page_prot);
+	return 0;
+}
+
+static ssize_t enable_mmap_show(struct device *dev,
+				struct device_attribute *attr,
+				char *buf)
+{
+	struct aspeed_vga_sharedmem *vga_sharedmem = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%u\n", vga_sharedmem->mmap_enable);
+}
+
+static ssize_t enable_mmap_store(struct device *dev,
+				 struct device_attribute *attr,
+				  const char *buf, size_t count)
+{
+	struct aspeed_vga_sharedmem *vga_sharedmem =
+		dev_get_drvdata(dev);
+	bool val;
+
+	if (kstrtobool(buf, &val))
+		return -EINVAL;
+
+	vga_sharedmem->mmap_enable = val;
+
+	return count;
+}
+static DEVICE_ATTR_RW(enable_mmap);
+
+static struct attribute *sharedmem_attrs[] = {
+	&dev_attr_enable_mmap.attr,
+	NULL
+};
+
+static const struct attribute_group sharedmem_attr_group = {
+	.attrs = sharedmem_attrs,
+};
+
+static const struct attribute_group *sharedmem_attr_groups[] = {
+	&sharedmem_attr_group,
+	NULL
+};
+
+static const struct file_operations vga_sharedmem_fops = {
+	.owner	= THIS_MODULE,
+	.open	= vga_open,
+	.mmap	= vga_mmap,
+};
+
+static struct miscdevice vga_sharedmem_miscdev = {
+	.minor = MISC_DYNAMIC_MINOR,
+	.name = SHAREDMEM_NAME,
+	.fops = &vga_sharedmem_fops,
+	.groups = sharedmem_attr_groups,
+};
+
+static int vga_sharedmem_probe(struct platform_device *pdev)
+{
+	struct aspeed_vga_sharedmem *vga_sharedmem;
+	struct device *dev = &pdev->dev;
+	u32 reg[2];
+	struct resource *rc;
+
+	vga_sharedmem = devm_kzalloc(dev, sizeof(*vga_sharedmem), GFP_KERNEL);
+	if (!vga_sharedmem)
+		return -ENOMEM;
+
+	dev_set_drvdata(&pdev->dev, vga_sharedmem);
+
+	rc = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!rc) {
+		dev_err(dev, "Couldn't read size device-tree property\n");
+		return -ENXIO;
+	}
+
+	vga_sharedmem->addr = rc->start;
+	vga_sharedmem->size = resource_size(rc);
+	vga_sharedmem->mmap_enable = true;
+
+	vga_sharedmem->miscdev = vga_sharedmem_miscdev;
+
+	return misc_register(&vga_sharedmem->miscdev);
+}
+
+static int vga_sharedmem_remove(struct platform_device *pdev)
+{
+	struct aspeed_vga_sharedmem *vga_sharedmem =
+				dev_get_drvdata(&pdev->dev);
+
+	misc_deregister(&vga_sharedmem->miscdev);
+
+	return 0;
+}
+
+static const struct of_device_id vga_sharedmem_match[] = {
+	{ .compatible = "aspeed,ast2500-vga-sharedmem", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, vga_sharedmem_match);
+
+static struct platform_driver vga_sharedmem_driver = {
+	.driver = {
+		.name	= "VGA-SHAREDMEM",
+		.of_match_table = vga_sharedmem_match,
+	},
+	.probe = vga_sharedmem_probe,
+	.remove = vga_sharedmem_remove,
+};
+
+module_platform_driver(vga_sharedmem_driver);
+
+MODULE_AUTHOR("Yang Cheng <cheng.c.yang@intel.com>");
+MODULE_DESCRIPTION("Shared VGA memory");
+MODULE_LICENSE("GPL v2");
-- 
2.16.2

